environment: &env
  CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
  CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
  TZ: "/usr/share/zoneinfo/America/Toronto"

defaults: &defaults
  working_directory: ~/reduxicle
  environment:
    <<: *env
  docker:
    - image: circleci/node:8

job-templates:
    test-package: &test-package
        <<: *defaults
        parallelism: 1
        steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                name: Prepare to test
                command: cp -R /tmp/workspace/. .
            - run:
                name: Run tests
                command: |
                    project_name=reduxicle-${CIRCLE_JOB//test-/}
                    echo "project name is $project_name"
                    TEST_PACKAGE=$project_name yarn test
            - run:
                name: Upload coverage
                command: |
                    project_name=reduxicle-${CIRCLE_JOB//test-/}
                    flag_name=$(echo $project_name | tr '-' '_')
                    bash <(curl -s https://codecov.io/bash) -F $flag_name

    rc-deploy: &rc-deploy
        <<: *defaults
        parallelism: 1
        steps:
            - attach_workspace:
                at: /tmp/workspace
            - run:
                name: Prepare to test
                command: cp -R /tmp/workspace/. .
            - run:
                name: Deploy
                command: |
                    if [[ $CIRCLE_PROJECT_USERNAME == "postmediaio" && -z $CIRCLE_PR_USERNAME ]]; then
                        folder_name=${CIRCLE_JOB//rc-deploy-/}
                        project_name=reduxicle-$folder_name
                        echo "folder name is $folder_name"
                        echo "project name is $project_name"

                        cd packages/$project_name
                        echo "access=public" >> .npmrc
                        echo "scope=@reduxicle" >> .npmrc
                        echo "registry=https://registry.npmjs.com" >> .npmrc
                        echo "//registry.npmjs.com/:_authToken=$NPM_PUBLIC_REGISTRY_PUBLISH_TOKEN" >> .npmrc
                        
                        latest_version=$(npm view @reduxicle/$folder_name version || echo "0.0.0")
                        if [[ $latest_version == "0.0.0" ]]; then
                            echo "Package wasn't found in the npm registry, but that's ok, publishing anyway..."
                        fi

                        latest_major=$(echo "$latest_version" | cut -d "." -f1)
                        latest_minor=$(echo "$latest_version" | cut -d "." -f2)
                        latest_minor_increased=$(($latest_minor+1))

                        next_version="$latest_major.$latest_minor_increased.0-rc.$CIRCLE_BUILD_NUM"
                        echo "next rc version will be $next_version"

                        npm version --no-git-tag-version $next_version
                        npm publish --tag rc
                    else
                        echo "Skipping deploy because this is a fork build..."
                    fi


version: 2
jobs:
  prepare:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          keys: 
            - dep-v1-{{ checksum "yarn.lock" }}
            - dep-v1-
      - run:
          name: Install dependencies
          command: yarn
      - save_cache:
          key: dep-v1-{{ checksum "yarn.lock" }}
          paths:
              - "node_modules"
      - run:
          name: Determine which projects to build
          command: |
            username=postmediaio
            project=reduxicle
            should_build_everything=1
            is_pr_from_fork=0
            dest_branch=master

            if [[ -n $CIRCLE_PR_USERNAME && $CIRCLE_PROJECT_USERNAME != $CIRCLE_PR_USERNAME && $CIRCLE_PROJECT_USERNAME = $username ]]; then
                echo "Detected this is a PR from a fork"
                is_pr_from_fork=1
            else
                echo "Detected this is not a PR from a fork"
            fi

            if [[ $is_pr_from_fork = 1 ]]; then
                dest_branch=$(curl -s https://api.github.com/repos/$username/$project/pulls/$CIRCLE_PR_NUMBER | jq -r '.head.ref')
                should_build_everything=0
            elif [[ $CIRCLE_BRANCH != "master" ]]; then
                dest_branch=$CIRCLE_BRANCH
                should_build_everything=0
            fi
            echo "Detected dest_branch is $dest_branch"
            
            if [[ $should_build_everything = 0 ]]; then
                echo "Decided to only build packages which have changed"
                lastest_commit_to_dest_branch="$(git ls-remote git://github.com/$username/$project.git refs/heads/$dest_branch | cut -f 1)"
                for folder in $(git log --format="" --name-only $lastest_commit_to_dest_branch^.. | cut -d"/" -f2 | sort -u); do
                    echo "bla is $folder"
                    if [[ -d "./packages/$foler" ]]; then
                        echo "Detected $folder package was modified"
                        echo $folder >> ./.circleci/projects-to-build.txt
                    fi
                done
            else
                echo "Decided to build everything"
                echo "Should build everything" >> ./.circleci/should-build-everything.txt
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
  build-core:
    <<: *defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Prepare to build
          command: cp -R /tmp/workspace/. .
      - run:
          name: Build
          environment:
            NODE_ENV: production
          command: yarn build --core
      - persist_to_workspace:
          root: .
          paths:
            - .
  build-non-core:
    <<: *defaults
    parallelism: 1
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Prepare to build
          command: cp -R /tmp/workspace/. .
      - run:
          name: Build
          environment:
            NODE_ENV: production
          command: yarn build --non-core
      - persist_to_workspace:
          root: .
          paths:
            - .
  test-core:
    <<: *test-package
  test-dialog:
    <<: *test-package
  test-react-router:
    <<: *test-package
  test-redux-form:
    <<: *test-package
  test-rest:
    <<: *test-package
  rc-deploy-core:
    <<: *rc-deploy
  rc-deploy-dialog:
    <<: *rc-deploy
  rc-deploy-react-router:
    <<: *rc-deploy
  rc-deploy-redux-form:
    <<: *rc-deploy
  rc-deploy-rest:
    <<: *rc-deploy
  deploy:
    <<: *defaults
    steps:
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Prepare to deploy
            command: cp -R /tmp/workspace/. .
        - run:
            name: Deploy
            command: |
                if [[ $CIRCLE_PROJECT_USERNAME == "postmediaio" && -z $CIRCLE_PR_USERNAME ]]; then
                    find packages/reduxicle-* -prune -type d | while read d; do
                        cd ~/reduxicle/$d
                        echo "access=public" >> .npmrc
                        echo "scope=@reduxicle" >> .npmrc
                        echo "registry=https://registry.npmjs.com" >> .npmrc
                        echo "//registry.npmjs.com/:_authToken=$NPM_PUBLIC_REGISTRY_PUBLISH_TOKEN" >> .npmrc
                        npm publish || true
                    done
                fi
workflows:
  version: 2
  workflow:
    jobs:
      - prepare
      - build-core:
          requires:
            - prepare        
      - build-non-core:
          requires:
            - build-core
      - test-core:
          requires:
            - prepare
      - test-dialog:
          requires:
            - build-core
      - test-react-router:
          requires:
            - build-core
      - test-redux-form:
          requires:
            - build-core
      - test-rest:
          requires:
            - build-core
      - rc-deploy-core:
          filters:
            branches:
              only:
                - dev
          requires:
            - build-core
            - test-core
      - rc-deploy-dialog:
          filters:
            branches:
              only:
                - dev
          requires:
            - build-non-core
            - test-dialog
      - rc-deploy-react-router:
          filters:
            branches:
              only:
                - dev
          requires:
            - build-non-core
            - test-react-router
      - rc-deploy-redux-form:
          filters:
            branches:
              only:
                - dev
          requires:
            - build-non-core
            - test-redux-form
      - rc-deploy-rest:
          filters:
            branches:
              only:
                - dev
          requires:
            - build-non-core
            - test-rest
      - deploy:
            filters:
                branches:
                    only:
                        - master
            requires:
                - build-core
                - build-non-core
                - test-core
                - test-dialog
                - test-react-router
                - test-redux-form
                - test-rest
